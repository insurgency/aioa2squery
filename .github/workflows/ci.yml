name: CI
on: push
jobs:
  test:
    name: Run unittests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install development dependencies
        # language=BASH
        run: |
          pip3 install --upgrade pip pipenv
          pipenv install --system --deploy --ignore-pipfile --dev
      - name: Run unittests with coverage
        # language=BASH
        run: |
          coverage3 run ./setup.py test
          coverage3 report
          coverage3 html
          coverage3 xml
      - name: Upload unittest coverage report as artifact
        uses: actions/upload-artifact@master
        with:
          name: Unittest coverage report
          path: ./coverage/
      - name: Upload unittest coverage report to Codecov
        uses: codecov/codecov-action@v1.0.3
        with:
          name: Unittest coverage report
          file: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
  lint:
    name: Run linter checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install development dependencies
        # language=BASH
        run: |
          pip3 install --upgrade pip pipenv
          pipenv install --system --deploy --ignore-pipfile --dev
      - name: Run documentation linter checks
        # language=BASH
        run: doc8 ./docs/
      - name: Run docstring linter checks
        continue-on-error: true # FIXME
        # language=BASH
        run: pydocstyle ./aioa2squery/
      - name: Run security linter checks
        continue-on-error: true # FIXME
        # language=BASH
        run: bandit -r ./aioa2squery/
      - name: Run code quality checks
        continue-on-error: true # FIXME
        # language=BASH
        run: flake8 ./aioa2squery/
      - name: Run code error checks
        continue-on-error: true # FIXME
        # language=BASH
        run: pylint ./aioa2squery/
  documentation:
    name: Build documentation
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install development dependencies
        # language=BASH
        run: |
          pip3 install --upgrade pip pipenv
          pipenv install --system --deploy --ignore-pipfile --dev
      - name: Check documentation links
        continue-on-error: true
        # language=BASH
        run: make -C ./docs/ linkcheck
      - name: Build documentation
        # language=BASH
        run: make -C ./docs/ html json
      - name: Upload JSON documentation output
        uses: actions/upload-artifact@master
        with:
          name: JSON documentation
          path: ./docs/_build/json/
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/latest' || github.ref == 'refs/heads/stable'
        uses: JamesIves/github-pages-deploy-action@master
        env:
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          BASE_BRANCH: latest
          BRANCH: gh-pages
          FOLDER: docs/_build/html/
  freeze:
    name: Build frozen binary
    needs: [test, lint]
    # PyInstaller does NOT have cross-compilation capabilities so an operating system build matrix must be used.
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
          - macOS-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install development dependencies
        # language=BASH
        run: |
          pip3 install --upgrade pip pipenv
          pipenv install --system --deploy --ignore-pipfile --dev
          # Reinstall PyInstaller manually, otherwise it will fail
          # See: https://github.com/pyinstaller/pyinstaller/pull/4455#issuecomment-537254602
          pip3 install git+https://github.com/pyinstaller/pyinstaller.git@develop#egg=PyInstaller
      - name: Create frozen command binary using PyInstaller
        # language=BASH
        run: pyinstaller --onefile --name a2squery ./aioa2squery/__main__.py
      - name: Ensure frozen binary works
        run: ./dist/a2squery -h
      - name: Upload frozen ${{ matrix.os }} binary
        uses: actions/upload-artifact@master
        with:
          name: a2squery_${{ matrix.os }}.zip
          path: ./dist/
  docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: [test, lint]
    # https://github.com/insurgency/aioa2squery/packages?package_type=Docker
    steps:
      - name: Log in to the GitHub Docker Registry
        env:
          # See: https://help.github.com/en/articles/virtual-environments-for-github-actions#github_token-secret
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # See: https://github.blog/changelog/2019-08-16-publishing-packages-from-a-github-action-to-github-package-registry
          # See: https://github.community/t5/GitHub-Actions/Github-Actions-Docker-login/m-p/31262#M740
          GITHUB_TOKEN: ${{ secrets.GITHUB_PACKAGE_REGISTRY_TOKEN }}
        # language=BASH
        run: echo $GITHUB_TOKEN | docker login --username ${GITHUB_REPOSITORY%/*} --password-stdin docker.pkg.github.com
      - uses: actions/checkout@v1
      - name: Build Docker image
        # language=BASH
        run: >-
          docker build
          --pull
          --build-arg PYTHON_VERSION=$(jq -j '._meta.requires.python_version' ./Pipfile.lock)
          --tag "docker.pkg.github.com/$GITHUB_REPOSITORY/a2squery:$(GITHUB_REF=${GITHUB_REF#refs/heads/}; echo -n ${GITHUB_REF////-})"
          --tag "docker.pkg.github.com/$GITHUB_REPOSITORY/a2squery:$(date +%s)"
          --tag "docker.pkg.github.com/$GITHUB_REPOSITORY/a2squery:$GITHUB_SHA"
          --tag "docker.pkg.github.com/$GITHUB_REPOSITORY/a2squery:${GITHUB_SHA:0:7}"
          ./
      - name: Publish Docker image to GitHub Package Registry
        # language=BASH
        if: github.ref == 'refs/heads/latest' || github.ref == 'refs/heads/stable'
        run: docker push "docker.pkg.github.com/$GITHUB_REPOSITORY/a2squery"
